!function(){"use strict";const t=function(t){"error"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"log")?console&&"function"==typeof console.error&&console.error(t):console&&"function"==typeof console.info&&console.info(t)},e=e=>t(e,"error"),n=()=>navigator.getGamepads&&"function"==typeof navigator.getGamepads||"function"==typeof navigator.webkitGetGamepads||!1,i="Invalid property.",o="Invalid value. It must be a number between 0.00 and 1.00.",s=t=>`Button "${t}" does not exist.`,a="Unknown event name.",c={init:function(t){let n={id:t.index,buttons:t.buttons.length,axes:Math.floor(t.axes.length/2),axeValues:[],axeThreshold:[1],hapticActuator:null,vibrationMode:-1,vibration:!1,mapping:t.mapping,buttonActions:{},axesActions:{},pressed:{},set:function(t,n){if(["axeThreshold"].indexOf(t)>=0){if("axeThreshold"===t&&(!parseFloat(n)||n<0||n>1))return void e(o);this[t]=n}else e(i)},vibrate:function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:.75,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500;if(this.hapticActuator)switch(this.vibrationMode){case 0:return this.hapticActuator.pulse(t,e);case 1:return this.hapticActuator.playEffect("dual-rumble",{duration:e,strongMagnitude:t,weakMagnitude:t})}},triggerDirectionalAction:function(t,e,n,i,o){n&&i%2===o?(this.pressed[`${t}${e}`]||(this.pressed[`${t}${e}`]=!0,this.axesActions[e][t].before()),this.axesActions[e][t].action()):this.pressed[`${t}${e}`]&&i%2===o&&(delete this.pressed[`${t}${e}`],this.axesActions[e][t].after())},checkStatus:function(){let t=null;const e=navigator.getGamepads?navigator.getGamepads():navigator.webkitGetGamepads?navigator.webkitGetGamepads():[];if(e.length){if(t=e[this.id],!t)return;if(t.buttons)for(let e=0;e<this.buttons;e++)!0===t.buttons[e].pressed?(this.pressed[`button${e}`]||(this.pressed[`button${e}`]=!0,this.buttonActions[e].before()),this.buttonActions[e].action()):this.pressed[`button${e}`]&&(delete this.pressed[`button${e}`],this.buttonActions[e].after());if(t.axes){const e=t.axes.length%2;for(let n=0;n<2*this.axes;n++){const i=Number(t.axes[n+e].toFixed(4)),o=Math.floor(n/2);this.axeValues[o][n%2]=i,this.triggerDirectionalAction("right",o,i>=this.axeThreshold[0],n,0),this.triggerDirectionalAction("left",o,i<=-this.axeThreshold[0],n,0),this.triggerDirectionalAction("down",o,i>=this.axeThreshold[0],n,1),this.triggerDirectionalAction("up",o,i<=-this.axeThreshold[0],n,1)}}}},associateEvent:function(t,n,i){if(t.match(/^button\d+$/)){const o=parseInt(t.match(/^button(\d+)$/)?.[1]||"0");o>=0&&o<this.buttons?this.buttonActions[o][i]=n:e(s(t))}else if("start"===t)this.buttonActions[9][i]=n;else if("select"===t)this.buttonActions[8][i]=n;else if("r1"===t)this.buttonActions[5][i]=n;else if("r2"===t)this.buttonActions[7][i]=n;else if("l1"===t)this.buttonActions[4][i]=n;else if("l2"===t)this.buttonActions[6][i]=n;else if("power"===t)this.buttons>=17?this.buttonActions[16][i]=n:e(s(t));else if(t.match(/^(up|down|left|right)(\d+)$/)){const o=t.match(/^(up|down|left|right)(\d+)$/);if(!o)return e(a),this;const c=o[1],r=parseInt(o[2]);r>=0&&r<this.axes?this.axesActions[r][c][i]=n:e(s(t))}else if(t.match(/^(up|down|left|right)$/)){const o=t.match(/^(up|down|left|right)$/)?.[1];if(!o)return e(a),this;this.axesActions[0][o][i]=n}return this},on:function(t,e){return this.associateEvent(t,e,"action")},off:function(t){return this.associateEvent(t,(function(){}),"action")},after:function(t,e){return this.associateEvent(t,e,"after")},before:function(t,e){return this.associateEvent(t,e,"before")}};for(let t=0;t<n.buttons;t++)n.buttonActions[t]={action:()=>{},after:()=>{},before:()=>{}};for(let t=0;t<n.axes;t++)n.axesActions[t]={down:{action:()=>{},after:()=>{},before:()=>{}},left:{action:()=>{},after:()=>{},before:()=>{}},right:{action:()=>{},after:()=>{},before:()=>{}},up:{action:()=>{},after:()=>{},before:()=>{}}},n.axeValues[t]=[0,0];return t.hapticActuators?"function"==typeof t.hapticActuators?.pulse?(n.hapticActuator=t.hapticActuators,n.vibrationMode=0,n.vibration=!0):t.hapticActuators[0]&&"function"==typeof t.hapticActuators[0]?.pulse&&(n.hapticActuator=t.hapticActuators[0],n.vibrationMode=0,n.vibration=!0):t.vibrationActuator&&"function"==typeof t.vibrationActuator.playEffect&&(n.hapticActuator=t.vibrationActuator,n.vibrationMode=1,n.vibration=!0),n}};var r=c;const h={gamepads:{},axeThreshold:[1],isReady:n(),onConnect:function(t){},onDisconnect:function(t){},onBeforeCycle:function(){},onAfterCycle:function(){},getGamepads:function(){return this.gamepads},getGamepad:function(t){return this.gamepads[t]?this.gamepads[t]:null},set:function(t,n){if(["axeThreshold"].indexOf(t)>=0){if("axeThreshold"===t&&(!parseFloat(n)||n<0||n>1))return void e(o);if(this[t]=n,"axeThreshold"===t){const t=this.getGamepads(),e=Object.keys(t);for(let n=0;n<e.length;n++)t[e[n]].set("axeThreshold",this.axeThreshold)}}else e(i)},checkStatus:function(){const t=window.requestAnimationFrame||window.webkitRequestAnimationFrame,e=Object.keys(h.gamepads);h.onBeforeCycle();for(let t=0;t<e.length;t++)h.gamepads[e[t]].checkStatus();h.onAfterCycle(),e.length>0&&t(h.checkStatus)},init:function(){window.addEventListener("gamepadconnected",(e=>{const n=e.gamepad||e.detail.gamepad;if(t("Gamepad detected."),window.gamepads||(window.gamepads={}),n){if(!window.gamepads[n.index]){window.gamepads[n.index]=n;const t=r.init(n);t.set("axeThreshold",this.axeThreshold),this.gamepads[t.id]=t,this.onConnect(this.gamepads[t.id])}1===Object.keys(this.gamepads).length&&this.checkStatus()}})),window.addEventListener("gamepaddisconnected",(e=>{const n=e.gamepad||e.detail.gamepad;t("Gamepad disconnected."),n&&(delete window.gamepads[n.index],delete this.gamepads[n.index],this.onDisconnect(n.index))}))},on:function(t,n){switch(t){case"connect":this.onConnect=n;break;case"disconnect":this.onDisconnect=n;break;case"beforeCycle":case"beforecycle":this.onBeforeCycle=n;break;case"afterCycle":case"aftercycle":this.onAfterCycle=n;break;default:e(a)}return this},off:function(t){switch(t){case"connect":this.onConnect=function(t){};break;case"disconnect":this.onDisconnect=function(t){};break;case"beforeCycle":case"beforecycle":this.onBeforeCycle=function(){};break;case"afterCycle":case"aftercycle":this.onAfterCycle=function(){};break;default:e(a)}return this}};h.init();var d=h;n()?window.gameControl=d:e("Your web browser does not support the Gamepad API.")}();